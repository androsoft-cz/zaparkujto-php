<?php

namespace App\Modules\Rpmapi;

use App\Model\Orm\Organizations\OrganizationsRepository;
use App\Model\Orm\Prescriptions\Prescription;
use App\Model\Orm\Prescriptions\PrescriptionsRepository;
use Nette\Http\Response;
use App\Model\Orm\Users\User;
use App\Model\Orm\Users\UsersRepository;
use Nette\Utils\DateTime;
use Tracy\Debugger;

class PrescriptionbatchPresenter extends BasePresenter
{
    /** @var OrganizationsRepository @inject */
    public $organizationsRepository;

    /** @var  PrescriptionsRepository @inject */
    public $prescriptionsRepository;

    /** @var  UsersRepository @inject */
    public $usersRepository;

    private $xdevlat;

    private $xdevlng;

    private $myUserData;


    public function startup(): void
    {
        parent::startup(); // TODO: Change the autogenerated stub
        $this->authenticateByBasic($this->query);
    }

    public function actionCreate($data)
    {
        Debugger::log($data, Debugger::DEBUG);

        try {
            $json = \Nette\Utils\Json::decode($data);
        } catch (\Exception $e) {
            $json = FALSE;
        }

        foreach ($json as $r) {
            /** @var User $user */
            $user = $this->usersRepository->findBy(['username' => $r->username])->fetch();

            if (!$user) {
                $this->sendError('Anonymous citizen identifier not found', Response::S404_NOT_FOUND);
            }

            if ($user) {
                /** @var Prescription $p */
                $p = new Prescription();
                $p->payeeId = $r->payee_id;
                $p->user = $user;
                $p->vs = $r->vs;
                $p->amount = $r->amount;
                $p->reminderDate = new DateTime($r->reminder_date);
                $p->reminderText = $r->reminder_text;
                $p->reminderNote = $r->reminder_note;
                $p->createdAt = new DateTime();
                // $p->deletedAt = null;
                // $p->paidAt = null;

                $this->prescriptionsRepository->persistAndFlush($p);
            }
        }

        $result = ['result' => 'ok', 'message' => 'Information accepted'];
        $this->sendApiResponse($result);
    }

    public function actionRead($id, array $query): void
    {
        if (!$id) {
            $this->sendError('Request body is not in our JSON format. ID is not set', Response::S400_BAD_REQUEST);
        }

        $results = [];
        $this->sendApiResponse($results);
    }

    public function actionReadAll(array $query): void
    {
        try {
            $results = [];
            $this->sendApiResponse($results);
        } catch (\ErrorException $e) {
            $this->sendError($e->getMessage(), Response::S400_BAD_REQUEST);
        }
    }

    public function authenticateByBasic(array $query)
    {
        $authorization = explode(' ', $this->getHttpRequest()->getHeader('Authorization'));
        if ($authorization[0] == 'Basic') {
            $access_token = $authorization[1];
        }

        if (!isset($access_token)) {
            if (isset($query['access_token'])) {
                $access_token = $query['access_token'];
            }
        }

        if (!isset($access_token)) {
            $this->sendError('Access token is not set', Response::S403_FORBIDDEN);
        }

        if ($access_token !== 'LfRjjOBpjNeQILG') {
            $this->sendError('Wrong access token', Response::S403_FORBIDDEN);
        }
    }
}
