<?php

namespace App\Modules\Rpmapi;

use App\Model\Exceptions\Traits\IApiMessageException;
use App\Modules;
use Exception;
use Nette\Application\Responses\JsonResponse;
use Nette\Caching\Cache;
use Nette\Caching\IStorage;
use Nette\Http\Response;
use Tracy\Debugger;

abstract class BasePresenter extends Modules\Base\BasePresenter
{

    const EXPIRE_TIME = 3600;

    /** @var IStorage $storage @inject */
    public $storage;

    /** @var Cache $cache */
    public $cache;

    public $isJsonRequest;

    public $showErrorInTemplate;

    public $query;

    public $cacheDependencies;

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub

        $this->getHttpResponse()->setHeader('Access-Control-Allow-Origin', '*');
        $this->getHttpResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization, X-Device-Lat, X-Device-Lng');
        $this->getHttpResponse()->setHeader('Access-Control-Allow-Methods', 'POST, PUT, DELETE, OPTIONS, GET');

        /* Pokud jde o metodu OPTIONS tak hned ukonřujeme a vracíme 200 */
        if ($this->getHttpRequest()->isMethod('OPTIONS')) {
            $this->terminate();
        }

        $this->cache = new Cache($this->storage);
        $this->query = $this->request->getParameter('query');
        $this->isJsonRequest = $this->checkJsonRequest();
        $this->cacheDependencies = [
            Cache::EXPIRE => self::EXPIRE_TIME . ' seconds',
            Cache::SLIDING => TRUE,
        ];

        if (isset($this->query['template'])) {
            $this->showErrorInTemplate = TRUE;
        } else {
            $this->showErrorInTemplate = FALSE;
        }

    }

    public function checkJsonRequest()
    {
        $contentHeader = $this->getHttpRequest()->getHeader('Content-Type');
        $acceptHeader = $this->getHttpRequest()->getHeader('Accept');

        $apiContentTypes = ['application/json', 'application/javascript'];
        $apiAcceptTypes = ['application/json', 'application/javascript'];

        $isJsonRequest = FALSE;

        foreach ($apiAcceptTypes as $acceptType) {
            if ($isJsonRequest) break;
            $isJsonRequest = strpos($acceptHeader, $acceptType);
        }

        foreach ($apiContentTypes as $contentType) {
            if ($isJsonRequest) break;
            $isJsonRequest = strpos($contentHeader, $contentType);
        }

        return $isJsonRequest;
    }

    public function sendApiResponse($results)
    {
        if ($this->showErrorInTemplate) {
            $this->template->response = $results;
            //$this->template->response = "vysledky";
            $this->template->setFile(__DIR__ . '/../templates/api_response.latte');
            $this->sendTemplate();
        } else {
            $response = new JsonResponse($results);
            $this->sendResponse($response);
        }
    }

    public function sendError($message, $code, $error = '', $messageParams = NULL)
    {
        if ($this->showErrorInTemplate) {
            $this->template->setFile(__DIR__ . '/../templates/api_error.latte');
            $this->template->message = $message;
            $this->template->code = $code;
            $this->template->error = $error;
            $this->sendTemplate();
        } else {
            $this->getHttpResponse()->setCode($code);
            $data = [
                'result' => 'error',
                'code' => $code,
                'message' => $message,
                'error' => $error,
                'message_params' => $messageParams,
            ];
            $this->sendResponse(new JsonResponse($data));
        }
    }

    public function sendErrorByException(Exception $exception, $defaultMessage = 'unknownError', $defaultMessageParams = NULL)
    {
        if ($exception instanceof IApiMessageException && $exception->hasApiMessage()) {
            $this->sendError($exception->getApiMessageKey(), Response::S400_BAD_REQUEST, '', $exception->getApiMessageParams());
        } else {
            Debugger::log($exception);
            $this->sendError($defaultMessage, Response::S400_BAD_REQUEST, '', $defaultMessageParams);
        }
    }
}
