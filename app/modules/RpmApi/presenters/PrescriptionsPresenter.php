<?php

namespace App\Modules\Rpmapi;

use App\Model\Orm\Organizations\OrganizationsRepository;
use App\Model\Orm\Prescriptions\PrescriptionsRepository;
use Nette\Http\Response;
use App\Model\Orm\Users\User;
use App\Model\Orm\Users\UsersRepository;

class PrescriptionsPresenter extends SecurePresenter
{
    /** @var OrganizationsRepository @inject */
    public $organizationsRepository;

    /** @var  PrescriptionsRepository @inject */
    public $prescriptionsRepository;

    /** @var  UsersRepository @inject */
    public $usersRepository;

    private $xdevlat;

    private $xdevlng;

    private $myUserData;


    public function startup(): void
    {
        parent::startup(); // TODO: Change the autogenerated stub

        $httpRequest = $this->getHttpRequest();
        $this->xdevlat = $httpRequest->getHeader('X-Device-Lat');
        $this->xdevlng = $httpRequest->getHeader('X-Device-Lng');

        if ($this->user->isLoggedIn()) {
            /** @var User $user */
            $user = $this->usersRepository->getById($this->user->id);

            $this->myUserData = [
                'org_id' => $user->organization ? $user->organization->id : NULL,
                'user_id' => $this->user->id,
            ];
        } else {
            $this->myUserData = [
                'org_id' => NULL,
                'user_id' => NULL,
            ];
        }
    }

    public function actionRead($id, array $query): void
    {
        if (!$id) {
            $this->sendError('Request body is not in our JSON format. ID is not set', Response::S400_BAD_REQUEST);
        }

        $results = [];
        $this->sendApiResponse($results);
    }

    public function actionReadAll(array $query): void
    {
        try {
            $q = $query['q'] ?? NULL;
            $prescriptions = $this->prescriptionsRepository->findBy(['this->user->id' => $this->myUserData['user_id']])->fetchAll();

            $results = [];

            /** @var Prescription $r */
            foreach ($prescriptions as $r) {
                $results[] = [
                    'id' => $r->id,
                    'user_login' => $r->user->username,
                    'vs' => $r->vs,
                    'amount' => $r->amount,
                    'reminder_date' => $r->reminderDate->format('c'),
                    'reminder_text' => $r->reminderText,
                    'reminder_note' => $r->reminderNote
                ];
            }

            $this->sendApiResponse($results);
        } catch (\ErrorException $e) {
            $this->sendError($e->getMessage(), Response::S400_BAD_REQUEST);
        }
    }
}
